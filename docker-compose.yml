services:
  app:
    build:
      context: .
    environment:
      CONFIG_PATH: ${CONFIG_PATH}
    depends_on:
      db:
        condition: service_healthy
        restart: true
      migrate:
        condition: service_completed_successfully
      prometheus:
        condition: service_healthy
    networks:
      postgres_network:
    ports:
      - 8080:8080
    volumes:
      - ./output:/output
      - ./config:/config
    secrets:
      - postgres_user
      - postgres_pswd
      - postgres_db

  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_pswd
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$(cat /run/secrets/postgres_user) -d $$(cat /run/secrets/postgres_db)" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 1s
    ports:
      - 5432:5432
    networks:
      postgres_network:
    secrets:
      - postgres_user
      - postgres_pswd
      - postgres_db

  migrate:
    image: migrate/migrate
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./db/migrations:/db/migrations
      - ./db/migrate-entrypoint.sh:/migrate-entrypoint.sh
    entrypoint: [ "/bin/sh" ]
    command: [ "/migrate-entrypoint.sh" ]
    networks:
      postgres_network:
    secrets:
      - postgres_user
      - postgres_pswd
      - postgres_db

  prometheus:
    image: prom/prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090

volumes:
  postgres_data:


networks:
  postgres_network:


secrets:
  postgres_pswd:
    file: .secrets/postgres_pswd.txt
  postgres_user:
    file: .secrets/postgres_user.txt
  postgres_db:
    file: .secrets/postgres_db.txt
