// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sentences.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSentencesBatch = `-- name: CreateSentencesBatch :one
WITH batch AS (
    INSERT INTO sentence_batches (name)
    VALUES ($1)
    RETURNING id
)

INSERT INTO sentences (value, batch_id)
SELECT
    sentence_value,
    (SELECT id FROM batch)
FROM UNNEST($2::text []) AS sentence_value
RETURNING id, value, batch_id
`

type CreateSentencesBatchParams struct {
	Name    string   `json:"name"`
	Column2 []string `json:"column_2"`
}

type CreateSentencesBatchRow struct {
	ID      int64       `json:"id"`
	Value   string      `json:"value"`
	BatchID pgtype.Int8 `json:"batch_id"`
}

func (q *Queries) CreateSentencesBatch(ctx context.Context, arg CreateSentencesBatchParams) (CreateSentencesBatchRow, error) {
	row := q.db.QueryRow(ctx, createSentencesBatch, arg.Name, arg.Column2)
	var i CreateSentencesBatchRow
	err := row.Scan(&i.ID, &i.Value, &i.BatchID)
	return i, err
}
