// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package textproc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const allWords = `-- name: AllWords :many
SELECT id, value, created_at
FROM words
WHERE deleted_at IS NULL
ORDER BY value ASC
LIMIT $1 OFFSET $2
`

type AllWordsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type AllWordsRow struct {
	ID        int64              `json:"id"`
	Value     string             `json:"value"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) AllWords(ctx context.Context, arg AllWordsParams) ([]AllWordsRow, error) {
	rows, err := q.db.Query(ctx, allWords, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllWordsRow
	for rows.Next() {
		var i AllWordsRow
		if err := rows.Scan(&i.ID, &i.Value, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWordFrequency = `-- name: GetWordFrequency :many
SELECT words.value, count(*) AS word_count
FROM words
WHERE deleted_at IS NULL
GROUP BY words.value
ORDER BY word_count ASC
LIMIT $1 OFFSET $2
`

type GetWordFrequencyParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetWordFrequencyRow struct {
	Value     string `json:"value"`
	WordCount int64  `json:"word_count"`
}

func (q *Queries) GetWordFrequency(ctx context.Context, arg GetWordFrequencyParams) ([]GetWordFrequencyRow, error) {
	rows, err := q.db.Query(ctx, getWordFrequency, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWordFrequencyRow
	for rows.Next() {
		var i GetWordFrequencyRow
		if err := rows.Scan(&i.Value, &i.WordCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertWord = `-- name: InsertWord :one
INSERT INTO words (value, created_at)
VALUES ($1, CURRENT_TIMESTAMP)
RETURNING id, value, created_at
`

type InsertWordRow struct {
	ID        int64              `json:"id"`
	Value     string             `json:"value"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) InsertWord(ctx context.Context, value string) (InsertWordRow, error) {
	row := q.db.QueryRow(ctx, insertWord, value)
	var i InsertWordRow
	err := row.Scan(&i.ID, &i.Value, &i.CreatedAt)
	return i, err
}
