// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package textproc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const allWords = `-- name: AllWords :many
SELECT id,
    value,
    created_at
FROM words
WHERE deleted_at IS NULL
ORDER BY value ASC
LIMIT $1 OFFSET $2
`

type AllWordsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type AllWordsRow struct {
	ID        int64              `json:"id"`
	Value     string             `json:"value"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) AllWords(ctx context.Context, arg AllWordsParams) ([]AllWordsRow, error) {
	rows, err := q.db.Query(ctx, allWords, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllWordsRow
	for rows.Next() {
		var i AllWordsRow
		if err := rows.Scan(&i.ID, &i.Value, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWordByValue = `-- name: GetWordByValue :one
SELECT id,
    value,
    created_at
FROM words
WHERE value = $1
    AND deleted_at IS NULL
LIMIT 1
`

type GetWordByValueRow struct {
	ID        int64              `json:"id"`
	Value     string             `json:"value"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetWordByValue(ctx context.Context, value string) (GetWordByValueRow, error) {
	row := q.db.QueryRow(ctx, getWordByValue, value)
	var i GetWordByValueRow
	err := row.Scan(&i.ID, &i.Value, &i.CreatedAt)
	return i, err
}

const insertWord = `-- name: InsertWord :one
INSERT INTO words (value, created_at)
VALUES ($1, CURRENT_TIMESTAMP) ON CONFLICT (value) DO NOTHING
RETURNING id,
    value,
    created_at
`

type InsertWordRow struct {
	ID        int64              `json:"id"`
	Value     string             `json:"value"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) InsertWord(ctx context.Context, value string) (InsertWordRow, error) {
	row := q.db.QueryRow(ctx, insertWord, value)
	var i InsertWordRow
	err := row.Scan(&i.ID, &i.Value, &i.CreatedAt)
	return i, err
}

const softDeleteWord = `-- name: SoftDeleteWord :exec
UPDATE words
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
    AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteWord(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, softDeleteWord, id)
	return err
}
